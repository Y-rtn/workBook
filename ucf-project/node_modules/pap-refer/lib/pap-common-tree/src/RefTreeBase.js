'use strict';

exports.__esModule = true;

var _setPrototypeOf = require('babel-runtime/core-js/object/set-prototype-of');

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _extends = _assign2["default"] || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _defaultProps, _class, _temp, _initialiseProps;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _immutable = require('immutable');

var _refTree = require('ref-tree');

var _refTree2 = _interopRequireDefault(_refTree);

var _utils = require('./utils');

var _request = require('./request');

var _request2 = _interopRequireDefault(_request);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = (0, _create2["default"])(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) _setPrototypeOf2["default"] ? (0, _setPrototypeOf2["default"])(subClass, superClass) : subClass.__proto__ = superClass; }

var noop = function noop() {};
var searchTimeCount = void 0;
var getTreeList = function getTreeList(url, param) {
	var content = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
	var jsonp = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
	return (0, _request2["default"])(url, {
		method: 'get',
		params: (0, _assign2["default"])(param, { content: content }),
		jsonp: jsonp
	});
};
// data:this.treeData,树的所有节点，curKey:正在操作的节点的key值，child：1.request请求得到的该key下的子节点，或者缓存中该key下的子节点
var clearChild = function clearChild(data, curKey, child) {
	data.map(function (item) {
		if (curKey == item.id) {
			item.children = child;
		} else if (item.children) {
			clearChild(item.children, curKey, child);
		} else {}
	});
	return data;
};
var propTypes = {
	title: _propTypes2["default"].string,
	tabData: _propTypes2["default"].array, //  json数组须指定 title,id 参数   默认为空,且为空时不显示 tab 组件
	multiple: _propTypes2["default"].bool, //  默认单选
	checkable: _propTypes2["default"].bool,
	showLine: _propTypes2["default"].bool,
	bottomButton: _propTypes2["default"].bool,
	defaultExpandAll: _propTypes2["default"].bool, // 数默认展开
	checkStrictly: _propTypes2["default"].bool,
	parentNodeDisableCheck: _propTypes2["default"].bool,
	checkedArray: _propTypes2["default"].array, //  指定已选择数据id
	param: _propTypes2["default"].object,
	lazyModal: _propTypes2["default"].bool,
	lazyParam: _propTypes2["default"].array, // 20190127懒加载需要多传参数，暂时不对外暴露
	emptyBut: _propTypes2["default"].bool, //清空按钮
	onCancel: _propTypes2["default"].func,
	onSave: _propTypes2["default"].func,
	value: _propTypes2["default"].string,
	lang: _propTypes2["default"].string,
	//重命名属性
	searchable: _propTypes2["default"].bool //  是否应用搜索 默认 false,

};
var defaultProps = (_defaultProps = {
	title: '弹窗标题',
	searchable: false, //  是否应用搜索 默认 false,
	tabData: [], //  json数组须指定 title,id 参数   默认为空,且为空时不显示 tab 组件
	multiple: false, //  默认单选
	checkable: true,
	showLine: false, //  默认单选
	bottomButton: true,
	defaultExpandAll: true, // 数默认展开
	checkStrictly: true,
	parentNodeDisableCheck: false,
	checkedArray: [], //  指定已选择数据id
	lazyModal: false,
	lazyParam: [], // 20190127懒加载需要多传参数，暂时不对外暴露
	emptyBut: false,
	param: {
		refCode: ''
	},
	onCancel: noop,
	onSave: noop,
	value: '',
	lang: 'zh_CN'
}, _defaultProps['showLine'] = false, _defaultProps);

var RefTreeBase = (_temp = _class = function (_Component) {
	_inherits(RefTreeBase, _Component);

	function RefTreeBase(props) {
		_classCallCheck(this, RefTreeBase);

		var _this = _possibleConstructorReturn(this, _Component.call(this, props));

		_initialiseProps.call(_this);

		var checkedArray = props.checkedArray,
		    multiple = props.multiple,
		    checkStrictly = props.checkStrictly,
		    parentNodeDisableCheck = props.parentNodeDisableCheck,
		    defaultExpandAll = props.defaultExpandAll,
		    tabData = props.tabData,
		    valueField = props.valueField;

		_this.state = {
			selectedArray: checkedArray || [], //  记录保存的选择项
			tabActiveKey: null, //  记录当前激活tab
			originKey: null, //  保留tab点击已选择的前一tab的key
			tabData: tabData,
			//  tree state
			defaultExpandAll: defaultExpandAll,
			multiple: multiple,
			checkStrictly: checkStrictly,
			parentNodeDisableCheck: parentNodeDisableCheck,
			checkedKeys: checkedArray.map(function (item) {
				return item[valueField];
			}),
			showError: false,
			expandedKeys: [],
			onSaveCheckItems: [],
			isAfterAjax: false,
			showLoading: false
		};

		_this.treeData = [];
		_this.treeDataCache = {};
		_this.searchValue; //搜索的内容
		return _this;
	}

	RefTreeBase.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
		return !(0, _immutable.is)(nextState, this.state) || nextProps.showModal !== this.props.showModal;
	};

	RefTreeBase.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
		var _this2 = this;

		var strictMode = nextProps.strictMode,
		    checkedArray = nextProps.checkedArray,
		    valueField = nextProps.valueField;
		//严格模式下每次打开必须重置数据

		if (nextProps.showModal && !this.props.showModal) {
			//正在打开弹窗
			//20190124因為不再走constructor，导致checkedKeys和selectedArray不一致
			if (checkedArray) {
				if (checkedArray.length === 0 && nextProps.value) {
					//20190520因为inITComponent的初始化走了两种
					var valueMap = (0, _utils.refValParse)(nextProps.value);
					checkedArray = [valueMap];
				}
				this.setState({
					selectedArray: checkedArray || [], //  记录保存的选择项
					checkedKeys: checkedArray.map(function (item) {
						return item[valueField];
					})
				});
			}
			if (strictMode || !this.treeData.length) {
				//开启严格模式 
				this.setState({
					showLoading: true
				}, function () {
					_this2.initComponent();
				});
			}
		}
		// this.setState({
		//   checkedArray:this.props.option.checkedArray
		// })
	};

	//   获取树组件数据
	RefTreeBase.prototype.getRefTreeData = function getRefTreeData(value) {
		var _this3 = this;

		var _props = this.props,
		    param = _props.param,
		    checkedArray = _props.checkedArray,
		    refModelUrl = _props.refModelUrl,
		    lazyModal = _props.lazyModal,
		    onAfterAjax = _props.onAfterAjax,
		    jsonp = _props.jsonp;

		var URL = refModelUrl.treeUrl;
		param = (0, _assign2["default"])(param, {
			treeNode: "",
			treeloadData: lazyModal
		});
		getTreeList(URL, param, value, jsonp).then(function (res) {
			if (onAfterAjax && !_this3.state.isAfterAjax) {
				onAfterAjax(res);
				_this3.setState({ isAfterAjax: true });
			}
			var data = res.data,
			    page = res.page;

			if (data && data.length > 0) {
				if (lazyModal) {
					data = data.map(function (item) {
						delete item.children;
						return item;
					});
				}
				_this3.treeData = data;

				_this3.setState({
					showLoading: false
				});
				if (data[0].id) {
					_this3.setState({
						expandedKeys: [data[0].id]
					});
				}
			} else {
				_this3.treeData = [];
				_this3.setState({
					showLoading: false
				});
			}
		})["catch"](function () {
			_this3.treeData = [];
			_this3.setState({
				showLoading: false
			});
		});
	};

	RefTreeBase.prototype.removeOne = function removeOne(c) {
		var selectedArray = this.state.selectedArray;

		var arr = selectedArray.filter(function (item) {
			return item.refpk !== c.refpk;
		});
		var selectedKeys = arr.map(function (item) {
			return item.refpk;
		});
		this.setState({
			selectedArray: arr,
			checkedKeys: selectedKeys
		});
	};

	RefTreeBase.prototype.clearAll = function clearAll() {
		this.setState({
			selectedArray: [],
			checkedKeys: []
		});
	};

	/**
  * 懒加载
  * @param {选择的节点} treeNode 
  */
	RefTreeBase.prototype.getRefTreeloadData = function getRefTreeloadData(treeNode, treeNodeAttr) {
		var _this4 = this;

		var _props2 = this.props,
		    param = _props2.param,
		    refModelUrl = _props2.refModelUrl,
		    lazyModal = _props2.lazyModal,
		    tabData = _props2.tabData,
		    jsonp = _props2.jsonp,
		    lazyParam = _props2.lazyParam;

		var URL = refModelUrl.treeUrl;
		// if(this.treeDataCache[treeNode]){
		// 	this.treeData = clearChild(this.treeData, treeNode, this.treeDataCache[treeNode]);
		// 	this.setState({
		// 		showLoading: false
		// 	});
		// 	return ;
		// }
		//lazyModal 懒加载模式,懒加载的参数传递与其他的不一样
		// 两种情况，单树只需要一个参数，组合树需要多个参数
		if (!lazyParam.length) {
			param = (0, _assign2["default"])(param, {
				treeNode: treeNode,
				treeloadData: lazyModal
			});
		} else {
			var treeNodeVal = {};
			treeNodeVal['refpk'] = treeNode;
			lazyParam.forEach(function (key) {
				treeNodeVal[key] = treeNodeAttr[key];
			});
			param = (0, _assign2["default"])(param, {
				treeNode: (0, _stringify2["default"])(treeNodeVal),
				treeloadData: lazyModal
			});
		}

		this.setState({
			showLoading: true
		});
		getTreeList(URL, param, this.searchValue, jsonp).then(function (res) {
			if (res) {
				var _res$data = res.data,
				    data = _res$data === undefined ? [] : _res$data;

				_this4.treeDataCache[treeNode] = data;
				if (data.length !== 0) {
					_this4.treeData = clearChild(_this4.treeData, treeNode, data);
				}
			}
			_this4.setState({
				showLoading: false
			});
		})["catch"](function () {
			_this4.setState({
				showLoading: false
			});
		});
	};

	RefTreeBase.prototype.removeByValue = function removeByValue(arr, val) {
		for (var i = 0; i < arr.length; i++) {
			if (arr[i] == val) {
				arr.splice(i, 1);
				break;
			}
		}
		return arr;
	};

	RefTreeBase.prototype.render = function render() {
		var _op;

		var _props3 = this.props,
		    title = _props3.title,
		    backdrop = _props3.backdrop,
		    className = _props3.className,
		    searchable = _props3.searchable,
		    valueField = _props3.valueField,
		    value = _props3.value,
		    checkedArray = _props3.checkedArray,
		    showLine = _props3.showLine,
		    lazyModal = _props3.lazyModal,
		    showModal = _props3.showModal,
		    lang = _props3.lang,
		    defaultExpandAll = _props3.defaultExpandAll,
		    _props3$nodeDisplay = _props3.nodeDisplay,
		    nodeDisplay = _props3$nodeDisplay === undefined ? "{refname}" : _props3$nodeDisplay,
		    buttons = _props3.buttons,
		    emptyBut = _props3.emptyBut,
		    _props3$theme = _props3.theme,
		    theme = _props3$theme === undefined ? 'ref-red' : _props3$theme,
		    _props3$modalProps = _props3.modalProps,
		    modalProps = _props3$modalProps === undefined ? {} : _props3$modalProps;
		var _state = this.state,
		    selectedArray = _state.selectedArray,
		    checkedKeys = _state.checkedKeys,
		    multiple = _state.multiple,
		    expandedKeys = _state.expandedKeys,
		    checkStrictly = _state.checkStrictly,
		    parentNodeDisableCheck = _state.parentNodeDisableCheck,
		    showLoading = _state.showLoading;

		var op = (_op = {
			title: title,
			backdrop: backdrop,
			className: className,
			showLoading: showLoading,
			searchable: searchable,
			valueField: valueField,
			value: value,
			checkStrictly: checkStrictly,
			showLine: showLine,
			lazyModal: lazyModal,
			showModal: showModal,
			lang: lang,
			defaultExpandAll: defaultExpandAll,
			nodeDisplay: nodeDisplay,
			buttons: buttons,
			emptyBut: emptyBut,
			multiple: multiple,
			treeData: this.treeData,
			theme: theme,
			getRefTreeData: this.getRefTreeData,
			onLoadData: this.onLoadData,
			onSave: this.onSave,
			onCancel: this.onCancel
		}, _op['getRefTreeData'] = this.onSearchClick, _op['onLoadData'] = this.onLoadData, _op.matchData = selectedArray, _op.modalProps = modalProps, _op.onTreeSelecting = this.onTreeSelecting, _op);
		return _react2["default"].createElement(_refTree2["default"], op);
	};

	return RefTreeBase;
}(_react.Component), _initialiseProps = function _initialiseProps() {
	var _this5 = this;

	this.initComponent = function () {
		var _props4 = _this5.props,
		    matchUrl = _props4.matchUrl,
		    param = _props4.param,
		    value = _props4.value,
		    jsonp = _props4.jsonp,
		    headers = _props4.headers,
		    valueField = _props4.valueField,
		    checkedArray = _props4.checkedArray,
		    onMatchInitValue = _props4.onMatchInitValue;


		_this5.getRefTreeData();
		//当有已选值，不做校验，即二次打开弹出层不做校验
		var valueMap = (0, _utils.refValParse)(value);
		if (checkedArray.length != 0 || !valueMap.refpk) return;
		if (matchUrl) {
			(0, _request2["default"])(matchUrl, {
				method: 'post',
				data: _extends({}, param, {
					refCode: param.refCode,
					pk_val: valueMap.refpk.split(',') || ''
				}),
				jsonp: jsonp,
				headers: headers

			}).then(function (response) {
				var _ref = response || {},
				    _ref$data = _ref.data,
				    data = _ref$data === undefined ? [] : _ref$data;

				if (Object.prototype.toString.call(onMatchInitValue) === '[object Function]') {
					onMatchInitValue(data);
				}
				_this5.setState({
					checkedArray: data,
					selectedArray: data,
					showLoading: false,
					checkedKeys: data.map(function (item) {
						return item.refpk;
					})
				});
			})["catch"](function () {
				_this5.setState({
					checkedArray: [],
					selectedArray: [],
					showLoading: false,
					checkedKeys: []
				});
			});
		} else {
			//当时不使用 matchUrl 做校验时，直接使用默认数护具标记选项，但数据完整性会变弱。
			_this5.setState({
				checkedArray: [valueMap],
				selectedArray: [valueMap],
				showLoading: false,
				checkedKeys: valueMap.refpk.split(',')
			});
		}
	};

	this.onTreeSelecting = function (selectedArray, selectedKeys) {
		var valueField = _this5.props.valueField;

		_this5.setState({
			selectedArray: selectedArray || [], //  记录保存的选择项
			checkedKeys: selectedArray.map(function (item) {
				return item[valueField];
			})
		});
	};

	this.onSave = function (selectedArray) {
		var valueField = _this5.props.valueField;

		_this5.setState({
			selectedArray: selectedArray || [], //  记录保存的选择项
			checkedKeys: selectedArray.map(function (item) {
				return item[valueField];
			})
		}, function () {
			_this5.searchValue = ''; //参照打开在关闭这里搜索条件清空
			_this5.props.onSave(selectedArray);
		});
	};

	this.onCancel = function () {
		_this5.setState({
			selectedArray: [],
			checkedKeys: [],
			onSaveCheckItems: [] //20190124不保存那么选中的数据清空
		}, function () {
			_this5.searchValue = ''; //参照打开在关闭这里搜索条件清空
			_this5.props.onCancel();
		});
	};

	this.onSearchClick = function (value) {
		_this5.searchValue = value;
		clearTimeout(searchTimeCount);
		searchTimeCount = setTimeout(function () {
			_this5.getRefTreeData(value);
		}, 300);
	};

	this.onSearchChange = function (value) {
		_this5.searchValue = value;
		clearTimeout(searchTimeCount);
		searchTimeCount = setTimeout(function () {
			_this5.getRefTreeData(value);
		}, 300);
	};

	this.onLoadData = function (treeNode) {
		return new _promise2["default"](function (resolve) {
			_this5.getRefTreeloadData(treeNode.props.eventKey, treeNode.props.attr);
			resolve();
		});
	};
}, _temp);

RefTreeBase.propTypes = propTypes;
RefTreeBase.defaultProps = defaultProps;
exports["default"] = RefTreeBase;