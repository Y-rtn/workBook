'use strict';

exports.__esModule = true;

var _setPrototypeOf = require('babel-runtime/core-js/object/set-prototype-of');

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _extends = _assign2["default"] || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp, _initialiseProps;
// import Icon from 'bee-icon';


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _request = require('./request');

var _request2 = _interopRequireDefault(_request);

var _utils = require('./utils');

var _beeRadio = require('bee-radio');

var _beeRadio2 = _interopRequireDefault(_beeRadio);

var _refTreeTable = require('ref-tree-table');

var _refTreeTable2 = _interopRequireDefault(_refTreeTable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = (0, _create2["default"])(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) _setPrototypeOf2["default"] ? (0, _setPrototypeOf2["default"])(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
	title: _propTypes2["default"].string,
	searchable: _propTypes2["default"].bool,
	emptyBut: _propTypes2["default"].bool,
	tabData: _propTypes2["default"].array,
	param: _propTypes2["default"].object,
	checkedArray: _propTypes2["default"].array,
	hasPage: _propTypes2["default"].bool,
	onCancel: _propTypes2["default"].func,
	onSave: _propTypes2["default"].func,
	lang: _propTypes2["default"].string,
	menuTitle: _propTypes2["default"].string,
	tableTitle: _propTypes2["default"].string,

	valueField: _propTypes2["default"].string,

	classNam: _propTypes2["default"].string,
	backdrop: _propTypes2["default"].bool,
	showLine: _propTypes2["default"].bool,
	treeloadData: _propTypes2["default"].bool,
	multiple: _propTypes2["default"].bool,
	destory: _propTypes2["default"].func
};
var defaultProps = {
	title: '弹窗标题',
	searchable: true,
	emptyBut: false,
	tabData: [//tab标签
	],
	param: {//url请求参数
	},
	checkedArray: [],
	hasPage: false,
	onCancel: function onCancel(p) {},
	onSave: function onSave(sels) {},
	lang: 'zh_CN',
	menuTitle: '',
	tableTitle: '',
	valueField: 'refpk',
	classNam: '',
	backdrop: true,
	showLine: false,
	treeloadData: false,
	multiple: false,

	destory: function destory() {}
};
var tableSearchTimeCount = void 0;
var treeSearchCount = void 0;

var getTreeList = function getTreeList(url, param) {
	var content = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
	var jsonp = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
	return (0, _request2["default"])(url, {
		method: 'get',
		params: (0, _assign2["default"])(param, { content: content }),
		jsonp: jsonp
	});
};
// data:this.treeData,树的所有节点，curKey:正在操作的节点的key值，child：1.request请求得到的该key下的子节点，或者缓存中该key下的子节点
var clearChild = function clearChild(data, curKey, child) {
	data.map(function (item) {
		if (curKey == item.id) {
			item.children = child;
		} else if (item.children) {
			clearChild(item.children, curKey, child);
		} else {}
	});
	return data;
};

var RefTreeTableBase = (_temp = _class = function (_Component) {
	_inherits(RefTreeTableBase, _Component);

	function RefTreeTableBase(props) {
		_classCallCheck(this, RefTreeTableBase);

		var _this2 = _possibleConstructorReturn(this, _Component.call(this, props));

		_initialiseProps.call(_this2);

		_this2.state = {
			condition: '',
			showLoading: true
		};
		_this2.checkedArray = [];
		// this.checkedMap = {};
		_this2.filterInfo = '';
		_this2.inited = false;
		_this2.treeDataCache = {};
		_this2.tableSearchVal = ''; //左树选择节点右表带上
		return _this2;
	}

	RefTreeTableBase.prototype.componentDidMount = function componentDidMount() {
		//初始化table的数据
		if (this.props.showModal) {
			this.getRefTreeData();
			this.initComponent(this.props, this.state.condition);
		}
	};

	RefTreeTableBase.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
		var _this3 = this;

		//要接收refcorewithinput的checkedArray，因为清空功能
		//内部缓存已选择值，不通过 state 缓存，表格缓存状态自动实现
		this.checkedArray = (0, _assign2["default"])([], nextProps.checkedArray || []);
		if (nextProps.showModal && nextProps.showModal !== this.props.showModal) {
			this.setState({
				condition: ''
			}, function () {
				_this3.getRefTreeData();
				_this3.initComponent(nextProps, '');
			});
		}
	};
	/**
  * start:table方法迁移
  */

	/**
 * 根据 refinfo 返回结果拆解并渲染表格表头
 * @param {object} data 
 */

	/**
  * 处理并渲染表格数据
  */


	/**
  * end:table方法迁移
  */
	/**
  * start:tree方法迁移
  */
	//获取树组件数据
	RefTreeTableBase.prototype.getRefTreeData = function getRefTreeData(value) {
		var _this4 = this;

		this.onTreeLoading('loading');
		var _props = this.props,
		    param = _props.param,
		    refModelUrl = _props.refModelUrl,
		    lazyModal = _props.lazyModal,
		    onAfterAjax = _props.onAfterAjax,
		    jsonp = _props.jsonp;

		var URL = refModelUrl.treeUrl;
		param = (0, _assign2["default"])(param, {
			treeNode: "",
			treeloadData: lazyModal
		});
		getTreeList(URL, param, value, jsonp).then(function (res) {
			if (onAfterAjax && !_this4.state.isAfterAjax) {
				onAfterAjax(res);
				_this4.setState({ isAfterAjax: true });
			}
			var data = res.data,
			    page = res.page;

			if (data && data.length > 0) {
				if (lazyModal) {
					data = data.map(function (item) {
						delete item.children;
						return item;
					});
				}
				_this4.treeData = data;
				_this4.onTreeLoading('loaded');
				if (data[0].id) {
					_this4.setState({
						expandedKeys: [data[0].id]
					});
				}
			} else {
				_this4.treeData = [];
				_this4.onTreeLoading('loaded');
			}
		})["catch"](function () {
			_this4.treeData = [];
			_this4.onTreeLoading('fail');
		});
	};

	RefTreeTableBase.prototype.getRefTreeloadData = function getRefTreeloadData(treeNode, treeNodeAttr) {
		var _this5 = this;

		var _props2 = this.props,
		    param = _props2.param,
		    refModelUrl = _props2.refModelUrl,
		    lazyModal = _props2.lazyModal,
		    tabData = _props2.tabData,
		    jsonp = _props2.jsonp,
		    _props2$lazyParam = _props2.lazyParam,
		    lazyParam = _props2$lazyParam === undefined ? [] : _props2$lazyParam;

		var URL = refModelUrl.treeUrl;
		// this.treeDataCache[treeNode]保存的数据是否是带上搜索条件的不能判定
		// if(this.treeDataCache[treeNode]){
		// 	this.treeData = clearChild(this.treeData, treeNode, this.treeDataCache[treeNode]);
		// 	this.onTreeLoading('loaded');
		// 	return ;
		// }
		if (!lazyParam.length) {
			param = (0, _assign2["default"])(param, {
				treeNode: treeNode,
				treeloadData: lazyModal
			});
		} else {
			var treeNodeVal = {};
			treeNodeVal['refpk'] = treeNode;
			lazyParam.forEach(function (key) {
				treeNodeVal[key] = treeNodeAttr[key];
			});
			param = (0, _assign2["default"])(param, {
				treeNode: (0, _stringify2["default"])(treeNodeVal),
				treeloadData: lazyModal
			});
		}
		this.onTreeLoading('loading');
		getTreeList(URL, param, "", jsonp).then(function (res) {
			if (res) {
				var _res$data = res.data,
				    data = _res$data === undefined ? [] : _res$data;

				_this5.treeDataCache[treeNode] = data;
				_this5.treeData = clearChild(_this5.treeData, treeNode, data);
			}
			_this5.onTreeLoading('loaded');
		})["catch"](function () {
			_this5.onTreeLoading('fail');
		});
	};
	/**
  * end:tree方法迁移
  */
	//选择了一个树的节点


	RefTreeTableBase.prototype.render = function render() {
		var _props3 = this.props,
		    className = _props3.className,
		    _props3$showModal = _props3.showModal,
		    showModal = _props3$showModal === undefined ? false : _props3$showModal,
		    searchable = _props3.searchable,
		    backdrop = _props3.backdrop,
		    title = _props3.title,
		    valueField = _props3.valueField,
		    value = _props3.value,
		    checkStrictly = _props3.checkStrictly,
		    defaultExpandAll = _props3.defaultExpandAll,
		    nodeDisplay = _props3.nodeDisplay,
		    showLine = _props3.showLine,
		    multiple = _props3.multiple,
		    menuTitle = _props3.menuTitle,
		    lazyModal = _props3.lazyModal,
		    tableTitle = _props3.tableTitle,
		    lang = _props3.lang,
		    buttons = _props3.buttons,
		    _props3$theme = _props3.theme,
		    theme = _props3$theme === undefined ? "ref-red" : _props3$theme;
		var _state = this.state,
		    condition = _state.condition,
		    showLoading = _state.showLoading;
		var columnsData = this.columnsData,
		    tableData = this.tableData,
		    pageCount = this.pageCount,
		    totalElements = this.totalElements,
		    currPageIndex = this.currPageIndex,
		    loadTableData = this.loadTableData,
		    onTableSearch = this.onTableSearch;
		var treeData = this.treeData,
		    onTreeChange = this.onTreeChange,
		    onTreeSearch = this.onTreeSearch,
		    onLoadData = this.onLoadData;

		var otherProps = (0, _assign2["default"])({}, _extends({}, this.props, {
			buttons: buttons,
			theme: theme,
			className: className,
			lang: lang,
			backdrop: backdrop,
			valueField: valueField,
			showLoading: showLoading,
			showModal: showModal, //就是为了update，不对外
			onSave: this.treeTableSave,
			onCancel: this.props.onCancel,
			title: title
		}));
		var treeProps = (0, _assign2["default"])({}, {
			menuTitle: menuTitle,
			searchable: searchable,
			showLine: showLine,
			multiple: multiple,
			checkStrictly: checkStrictly,
			nodeDisplay: nodeDisplay,
			defaultExpandAll: defaultExpandAll,
			treeData: treeData,
			onTreeChange: onTreeChange,
			onTreeSearch: onTreeSearch,
			onLoadData: onLoadData,
			lazyModal: lazyModal
		});
		var tableProps = (0, _assign2["default"])({}, {
			tableTitle: tableTitle,
			multiple: multiple,
			condition: condition,
			columnsData: columnsData,
			tableData: tableData,
			page: { pageCount: pageCount, totalElements: totalElements, currPageIndex: currPageIndex - 1 },
			loadTableData: loadTableData,
			onTableSearch: onTableSearch,
			matchData: this.checkedArray || [],
			value: value
		});
		return _react2["default"].createElement(_refTreeTable2["default"], _extends({}, otherProps, treeProps, tableProps));
	};

	return RefTreeTableBase;
}(_react.Component), _initialiseProps = function _initialiseProps() {
	var _this6 = this;

	this.initComponent = function (props, condition) {
		if (!_this6.state.showLoading) {
			_this6.setState({ showLoading: true });
		}
		_this6.inited = true;
		_this6.pageSize = 10; //每页数据数
		_this6.currPageIndex = 1; //激活页码
		var jsonp = props.jsonp,
		    headers = props.headers,
		    param = props.param,
		    value = props.value,
		    matchUrl = props.matchUrl,
		    onMatchInitValue = props.onMatchInitValue,
		    _props$valueField = props.valueField,
		    valueField = _props$valueField === undefined ? "refpk" : _props$valueField;

		var requestList = [_this6.getTableHeader(), _this6.getTableData({
			condition: condition,
			'refClientPageInfo.currPageIndex': _this6.currPageIndex - 1,
			'refClientPageInfo.pageSize': _this6.pageSize,
			content: _this6.tableSearchVal
		})];
		var valueMap = (0, _utils.refValParse)(value);
		if (Boolean(_this6.checkedArray.length == 0 && valueMap[valueField] && matchUrl)) {
			requestList.push((0, _request2["default"])(matchUrl, {
				method: 'post',
				data: _extends({}, param, {
					pk_val: valueMap.refpk.split(',')
				}),
				jsonp: jsonp,
				headers: headers

			}));
		};
		_promise2["default"].all(requestList).then(function (_ref) {
			var columnsData = _ref[0],
			    bodyData = _ref[1],
			    matchData = _ref[2];

			if (_this6.props.onAfterAjax) {
				_this6.props.onAfterAjax(bodyData);
			}
			if (matchData) {
				var _matchData$data = matchData.data,
				    data = _matchData$data === undefined ? [] : _matchData$data;
				// this.checkedMap = {};

				_this6.checkedArray = data.map(function (item) {
					item.key = item[valueField];
					item._checked = true;
					// this.checkedMap[item.key] = item;
					return item;
				});
				if (Object.prototype.toString.call(onMatchInitValue) === '[object Function]') {
					onMatchInitValue(data);
				}
				_this6.setState({
					selectedDataLength: _this6.checkedArray.length,
					mustRender: Math.random()
				});
			}
			_this6.launchTableHeader(columnsData);
			if (bodyData) {
				_this6.launchTableData(bodyData);
			}
			_this6.setState({
				showLoading: false
			});
		})["catch"](function (e) {
			_this6.launchTableHeader({});
			_this6.launchTableData({});
			_this6.setState({
				showLoading: false
			});
			console.error(e);
		});;
	};

	this.getTableHeader = function () {
		var _props4 = _this6.props,
		    refModelUrl = _props4.refModelUrl,
		    param = _props4.param,
		    jsonp = _props4.jsonp,
		    headers = _props4.headers;

		return (0, _request2["default"])(refModelUrl.refInfo, {
			method: 'get',
			params: param,
			jsonp: jsonp,
			headers: headers
		});
	};

	this.getTableData = function (params) {
		var _props5 = _this6.props,
		    refModelUrl = _props5.refModelUrl,
		    param = _props5.param,
		    jsonp = _props5.jsonp,
		    headers = _props5.headers;

		return (0, _request2["default"])(refModelUrl.tableBodyUrl, {
			method: 'get',
			params: _extends({}, param, params),
			jsonp: jsonp,
			headers: headers
		});
	};

	this.launchTableHeader = function (data) {
		if (!data) return;
		var _props6 = _this6.props,
		    multiple = _props6.multiple,
		    valueField = _props6.valueField;

		var keyList = data.strFieldCode || [];
		var titleList = data.strFieldName || [];

		var colunmsList = keyList.map(function (item, index) {
			return {
				key: item,
				dataIndex: item,
				title: titleList[index]
			};
		});
		if (colunmsList.length === 0) {
			colunmsList = [{ title: "未传递表头数据", dataIndex: "nodata", key: "nodata" }];
		} else if (!multiple) {
			//单选时用对号符号标记当前行选中
			colunmsList.unshift({
				title: " ",
				dataIndex: "a",
				key: "a",
				width: 45,
				render: function render(text, record, index) {
					return _react2["default"].createElement(
						_beeRadio2["default"].RadioGroup,
						{
							name: record[valueField],
							selectedValue: record._checked ? record[valueField] : null
						},
						_react2["default"].createElement(_beeRadio2["default"], { value: record[valueField] })
					);
					// return record._checked ? <Icon className="uf-correct" style={{color: '#0558f5'}}/> : ''
				}
			});
		}
		_this6.columnsData = colunmsList;
	};

	this.launchTableData = function (response) {
		if (!response) return;
		var _props$valueField2 = _this6.props.valueField,
		    valueField = _props$valueField2 === undefined ? "refpk" : _props$valueField2;
		var _response$data = response.data,
		    data = _response$data === undefined ? [] : _response$data,
		    _response$page = response.page,
		    page = _response$page === undefined ? {} : _response$page;

		data.map(function (record, k) {
			record.key = record[valueField];
			return record;
		});
		_this6.tableData = data;
		_this6.pageCount = page.pageCount || 0;
		_this6.currPageIndex = page.currPageIndex + 1 || 0;
		_this6.totalElements = page.totalElements || 0;
	};

	this.loadTableData = function (param) {
		_this6.setState({
			showLoading: true
		});
		var _this = _this6;
		param.condition = _this6.state.condition;
		_this6.getTableData(param).then(function (response) {
			_this.launchTableData(response);
			_this.setState({
				showLoading: false
			});
		})["catch"](function () {
			_this.launchTableData({});
			_this.setState({
				showLoading: false
			});
		});
	};

	this.onTableSearch = function (value) {
		clearTimeout(tableSearchTimeCount);
		_this6.tableSearchVal = value;
		var _this = _this6;
		tableSearchTimeCount = setTimeout(function () {
			var _props7 = _this6.props,
			    tableBodyUrl = _props7.refModelUrl.tableBodyUrl,
			    param = _props7.param,
			    jsonp = _props7.jsonp,
			    headers = _props7.headers;

			_this6.filterInfo = value;
			_this6.setState({
				showLoading: true,
				tableIsSelecting: true
			}, function () {
				var pageSize = _this.pageSize;

				var paramWithFilter = (0, _assign2["default"])({}, param, { page: 0, pageSize: pageSize, content: value, 'refClientPageInfo.currPageIndex': 0, 'refClientPageInfo.pageSize': pageSize });

				_this.loadTableData(paramWithFilter);
			});
		}, 300);
	};

	this.onLoadData = function (treeNode) {
		return new _promise2["default"](function (resolve) {
			_this6.getRefTreeloadData(treeNode.props.eventKey, treeNode.props.attr);
			resolve();
		});
	};

	this.onTreeSearch = function (value) {
		clearTimeout(treeSearchCount);
		treeSearchCount = setTimeout(function () {
			_this6.getRefTreeData(value);
		}, 300);
	};

	this.onTreeChange = function (record) {
		if (!record || !record.length) return;
		var item = record[0];
		var condition = void 0;
		if (item.entityType) {
			condition = {
				refpk: item.refpk,
				entityType: item.entityType
			};
		} else {
			condition = record.map(function (item) {
				return item.refpk;
			}).join(',');
		}
		_this6.setState({
			condition: condition
		}, function () {
			_this6.initComponent(_this6.props, condition);
		});
	};

	this.onTreeLoading = function (type) {
		var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};

		//当树加载数据时整个组件不可编辑
		if (type === 'loading') {
			_this6.setState({
				showLoading: true
			}, callback);
		} else {
			_this6.setState({
				showLoading: false
			}, callback);
		}
	};

	this.treeTableSave = function (checkedArray) {
		_this6.checkedArray = checkedArray;
		_this6.props.onSave(checkedArray);
	};
}, _temp);


RefTreeTableBase.propTypes = propTypes;
RefTreeTableBase.defaultProps = defaultProps;
exports["default"] = RefTreeTableBase;