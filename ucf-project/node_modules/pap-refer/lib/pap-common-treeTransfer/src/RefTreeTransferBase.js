'use strict';

exports.__esModule = true;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _setPrototypeOf = require('babel-runtime/core-js/object/set-prototype-of');

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _extends = _assign2["default"] || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _refTreeTransfer = require('ref-tree-transfer');

var _refTreeTransfer2 = _interopRequireDefault(_refTreeTransfer);

var _request = require('./request');

var _request2 = _interopRequireDefault(_request);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new _promise2["default"](function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return _promise2["default"].resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = (0, _create2["default"])(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) _setPrototypeOf2["default"] ? (0, _setPrototypeOf2["default"])(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
	title: _propTypes2["default"].string,
	param: _propTypes2["default"].object,
	checkedArray: _propTypes2["default"].array,
	defaultSelectNode: _propTypes2["default"].object,
	onCancel: _propTypes2["default"].func,
	onSave: _propTypes2["default"].func,
	lang: _propTypes2["default"].string,
	emptyBut: _propTypes2["default"].bool //清空按钮
};
var defaultProps = {
	title: '弹窗标题',
	param: { //url请求参数
		refCode: 'test_common', //test_common||test_grid||test_tree||test_treeTable
		tenantId: 'xxx',
		sysId: 'xxx'
	},
	defaultSelectNode: {},
	checkedArray: [],
	onCancel: function onCancel(p) {},
	onSave: function onSave(sels) {},
	destory: function destory(p) {},
	lang: 'zh_CN',
	emptyBut: false
	//refpk
};
var RefTreeTransferBase = function (_Component) {
	_inherits(RefTreeTransferBase, _Component);

	function RefTreeTransferBase(props) {
		var _this2 = this;

		_classCallCheck(this, RefTreeTransferBase);

		var _this = _possibleConstructorReturn(this, _Component.call(this, props));

		_this.handleTreeSelect = function () {
			var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator2["default"].mark(function _callee() {
				var selectNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

				var _this$props, valueField, param, refModelUrl, jsonp, selectKey, entityTypeVal, dataMap, data, _this$state, transferData, targetKeys, selectedData, temp, tempTransferData;

				return _regenerator2["default"].wrap(function _callee$(_context) {
					while (1) {
						switch (_context.prev = _context.next) {
							case 0:
								_this$props = _this.props, valueField = _this$props.valueField, param = _this$props.param, refModelUrl = _this$props.refModelUrl, jsonp = _this$props.jsonp;
								selectKey = selectNode[valueField] || '';
								entityTypeVal = selectNode['entityType'];
								_context.next = 5;
								return (0, _request2["default"])(refModelUrl.tableBodyUrl, {
									method: 'get',
									params: _extends({ condition: !!entityTypeVal ? (0, _stringify2["default"])({ 'refpk': selectKey, 'entityType': entityTypeVal }) : selectKey }, param),
									jsonp: jsonp
								});

							case 5:
								dataMap = _context.sent;
								data = dataMap.data;
								_this$state = _this.state, transferData = _this$state.transferData, targetKeys = _this$state.targetKeys;
								selectedData = transferData.filter(function (v) {
									return targetKeys.some(function (key) {
										return key == v[valueField];
									});
								});

								if (!data) data = [];
								temp = data.filter(function (v, k) {
									return selectedData.every(function (v1) {
										return v1[valueField] != v[valueField];
									});
								});
								tempTransferData = temp.concat(selectedData);

								_this.setState({
									transferData: tempTransferData
								});

							case 13:
							case 'end':
								return _context.stop();
						}
					}
				}, _callee, _this2);
			}));

			return function () {
				return _ref.apply(this, arguments);
			};
		}();

		_this.transferSave = function () {
			//targetKeys, needTransferData
			var valueField = _this.props.valueField;
			var _this$state2 = _this.state,
			    transferData = _this$state2.transferData,
			    targetKeys = _this$state2.targetKeys;
			// var needTransferData = transferData.filter((v,k)=>{
			//   return targetKeys.some(targetCode => v.refpk === targetCode )
			// })

			var needTransferData = [];
			targetKeys.forEach(function (v, i) {
				transferData.forEach(function (v2, i2) {
					if (v == v2[valueField]) {
						needTransferData.push(v2);
					}
				});
			});
			_this.setState({
				// targetKeys,
				confirmTargetKeys: needTransferData,
				showModal: false
			});

			_this.props.onSave(needTransferData);
		};

		_this.transferCancel = function () {
			var _this$state3 = _this.state,
			    targetKeys = _this$state3.targetKeys,
			    confirmTargetKeys = _this$state3.confirmTargetKeys;

			var cancelTargetKeys = [];
			confirmTargetKeys.forEach(function (v, i) {
				cancelTargetKeys.push(v[_this.props.valueField]);
			});
			_this.setState({
				targetKeys: cancelTargetKeys,
				showModal: false
			});
			_this.props.onCancel();
			_this.props.destory();
		};

		_this.setTargetKeys = function (targetKeys) {
			_this.setState({
				targetKeys: targetKeys
			});
		};

		_this.onChangerightSearch = function () {
			var _ref2 = _asyncToGenerator( /*#__PURE__*/_regenerator2["default"].mark(function _callee2(value) {
				var _this$props2, refModelUrl, param, valueField, jsonp, response, data, _this$state4, transferData, targetKeys, selectedData, temp, tempTransferData;

				return _regenerator2["default"].wrap(function _callee2$(_context2) {
					while (1) {
						switch (_context2.prev = _context2.next) {
							case 0:
								_this$props2 = _this.props, refModelUrl = _this$props2.refModelUrl, param = _this$props2.param, valueField = _this$props2.valueField, jsonp = _this$props2.jsonp;
								_context2.next = 3;
								return (0, _request2["default"])(refModelUrl.tableBodyUrlSearch, {
									method: 'get',
									params: _extends({ content: value }, param),
									jsonp: jsonp
								});

							case 3:
								response = _context2.sent;
								data = response.data;
								_this$state4 = _this.state, transferData = _this$state4.transferData, targetKeys = _this$state4.targetKeys;
								selectedData = transferData.filter(function (v) {
									return targetKeys.some(function (key) {
										return key == v[valueField];
									});
								});
								temp = data.filter(function (v, k) {
									return selectedData.every(function (v1) {
										return v1[valueField] != v[valueField];
									});
								});
								tempTransferData = temp.concat(selectedData);

								_this.setState({
									transferData: tempTransferData
								});

							case 10:
							case 'end':
								return _context2.stop();
						}
					}
				}, _callee2, _this2);
			}));

			return function (_x2) {
				return _ref2.apply(this, arguments);
			};
		}();

		_this.state = {
			showModal: true, //是否显示弹窗
			treeData: [],
			searchContent: '',
			transferData: [],
			targetKeys: props.checkedArray.map(function (v) {
				return v[props.valueField];
			}),
			confirmTargetKeys: props.checkedArray.map(function (v) {
				return v[props.valueField];
			})
		};
		return _this;
	}
	// componentWillReceiveProps(nextProps) {
	// 	// var { checkedArray } = nextProps.option
	// 	// var tempKey = checkedArray && checkedArray.map(v=>v.refpk)
	// 	// this.setState({
	// 	//   targetKeys:tempKey,
	// 	//   transferData:checkedArray,
	// 	// })
	// }


	RefTreeTransferBase.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
		var _this3 = this;

		if (nextProps.showModal && !this.props.showModal) {
			//正在打开弹窗
			var targetKeys = nextProps.checkedArray.map(function (v) {
				return v[nextProps.valueField];
			});
			this.setState({
				targetKeys: targetKeys
			}, function () {
				_this3.initComponent();
			});
		}
	};

	RefTreeTransferBase.prototype.componentDidMount = function componentDidMount() {
		this.props.showModal && this.initComponent();
	};

	RefTreeTransferBase.prototype.initComponent = function () {
		var _ref3 = _asyncToGenerator( /*#__PURE__*/_regenerator2["default"].mark(function _callee3() {
			var _props, refModelUrl, param, onAfterAjax, jsonp, defaultSelectNode, dataMap;

			return _regenerator2["default"].wrap(function _callee3$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							_props = this.props, refModelUrl = _props.refModelUrl, param = _props.param, onAfterAjax = _props.onAfterAjax, jsonp = _props.jsonp, defaultSelectNode = _props.defaultSelectNode;
							_context3.next = 3;
							return (0, _request2["default"])(refModelUrl.treeUrl, {
								method: 'get',
								params: param,
								jsonp: jsonp
							});

						case 3:
							dataMap = _context3.sent;

							if (onAfterAjax) {
								onAfterAjax(response);
							}
							this.setState({
								treeData: !!dataMap && !!dataMap.data ? dataMap.data : []
							});
							this.handleTreeSelect(defaultSelectNode);

						case 7:
						case 'end':
							return _context3.stop();
					}
				}
			}, _callee3, this);
		}));

		function initComponent() {
			return _ref3.apply(this, arguments);
		}

		return initComponent;
	}();

	RefTreeTransferBase.prototype.render = function render() {
		var _extends2;

		var _props2 = this.props,
		    _props2$title = _props2.title,
		    title = _props2$title === undefined ? '参照默认标题' : _props2$title,
		    _props2$textOption = _props2.textOption,
		    textOption = _props2$textOption === undefined ? { leftTitle: '默认树标题', rightTitle: '默认穿梭框', leftInfo: [], rightInfo: [] } : _props2$textOption,
		    className = _props2.className,
		    backdrop = _props2.backdrop,
		    refModelUrl = _props2.refModelUrl,
		    displayField = _props2.displayField,
		    valueField = _props2.valueField,
		    buttons = _props2.buttons,
		    showModal = _props2.showModal,
		    lang = _props2.lang,
		    _props2$theme = _props2.theme,
		    theme = _props2$theme === undefined ? 'ref-red' : _props2$theme,
		    _props2$searchPlaceho = _props2.searchPlaceholder,
		    searchPlaceholder = _props2$searchPlaceho === undefined ? '' : _props2$searchPlaceho,
		    _props2$notFoundConte = _props2.notFoundContent,
		    notFoundContent = _props2$notFoundConte === undefined ? '' : _props2$notFoundConte;
		var _state = this.state,
		    treeData = _state.treeData,
		    _state$transferData = _state.transferData,
		    transferData = _state$transferData === undefined ? [] : _state$transferData,
		    targetKeys = _state.targetKeys;
		//20190226穿梭框没有清空按钮并且目前存在问题

		var baseProps = _extends({}, this.props, (_extends2 = {
			title: title,
			textOption: textOption,
			className: className,
			backdrop: backdrop,
			refModelUrl: refModelUrl,
			displayField: displayField,
			valueField: valueField,
			buttons: buttons,
			showModal: showModal,
			lang: lang,
			theme: theme,
			searchPlaceholder: searchPlaceholder,
			notFoundContent: notFoundContent,
			treeData: [], //树的数据
			onChangerightSearch: this.onChangerightSearch,
			//方法
			handleTreeSelect: this.handleTreeSelect
		}, _extends2['treeData'] = treeData, _extends2.transferData = transferData, _extends2.targetKeys = targetKeys, _extends2.setTargetKeys = this.setTargetKeys, _extends2.onSave = this.transferSave, _extends2.onCancel = this.transferCancel, _extends2.onChangeleftSearch = function onChangeleftSearch() {}, _extends2));
		return _react2["default"].createElement(_refTreeTransfer2["default"], baseProps);
	};

	return RefTreeTransferBase;
}(_react.Component);

RefTreeTransferBase.propTypes = propTypes;
RefTreeTransferBase.defaultProps = defaultProps;
exports["default"] = RefTreeTransferBase;