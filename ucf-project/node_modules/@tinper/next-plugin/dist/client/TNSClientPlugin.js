'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var webpack = require("webpack");

var fs = require('fs');

var http = require('http');

var util = require('util');

var path = require('path');

var child_process = require('child_process');

var pkg = require("../../package.json"); // 客户端连接的脚本文件名


var CLIENT_CONNECT_FILE_NAME = 'TNSClientConnect.js'; // 远程插件的默认环境标识

var REMOTE_PLUGIN_ENV = 'online'; // 远程插件的各环境访问地址

var REMOTE_PLUGIN_BASE_URLS = {
  local: 'http://localhost:3002/server/',
  test: 'https://bip-test.yyuap.com/iuap-tns/ucf-wh/share/server/',
  daily: 'https://bip-daily.yyuap.com/iuap-tns/ucf-wh/share/server/',
  pre: 'https://bip-pre.diwork.com/iuap-tns/ucf-wh/share/server/',
  online: 'https://yonbip.diwork.com/iuap-tns/ucf-wh/share/server/'
}; // 远程插件的脚本文件名

var REMOTE_PLUGIN_FILE_NAME = 'TNSRemotePlugin.js'; // 获取远程插件的文件加载地址

function getRemotePluginUrl(env) {
  if (!env) env = REMOTE_PLUGIN_ENV;
  var envUrl = '';

  if (REMOTE_PLUGIN_BASE_URLS[env]) {
    //1.以环境标识方式加载
    envUrl = REMOTE_PLUGIN_BASE_URLS[env] + REMOTE_PLUGIN_FILE_NAME;
  } else {
    //2.自定义url地址方式加载
    if ((env + "").endsWith('.js')) {
      //2.1 以.js结束的文件直接加载
      envUrl = env;
    } else {
      // 2.1 以域名地址的方式加载则自动补充路径
      envUrl = (env.endsWith('/') ? env.substring(0, env.length - 1) : env) + '/iuap-tns/ucf-wh/share/server/' + REMOTE_PLUGIN_FILE_NAME;
    }
  }

  return envUrl;
}
/**
 * TNS客户端插件
 * @author Dio.Zhu
 */


var TNSClientPlugin = /*#__PURE__*/function () {
  /**
   * @param {TNSClientPlugin} [options]
   */
  function TNSClientPlugin(options) {
    _classCallCheck(this, TNSClientPlugin);

    // 远程插件定义
    this.remotePlugin = null; // 客户端配置参数

    this.clientOptions = options || {}; // 客户端参数默认配置值

    var _this$clientOptions$r = this.clientOptions.remotePluginEnv,
        remotePluginEnv = _this$clientOptions$r === void 0 ? REMOTE_PLUGIN_ENV : _this$clientOptions$r; // console.log("AAA-->",process.cwd()); //路径： /tns-plugin
    // console.log("AAA-->"+__filename); //路径： /tns-plugin/src/TNSClientPlugin.js
    // console.log("AAA-->"+__dirname); //路径： /tns-plugin/src

    console.log("[TNS]\u5BA2\u6237\u7AEF\u63D2\u4EF6\u7248\u672C\uFF1A" + TNSClientPlugin.version);
    console.log("[TNS]\u5BA2\u6237\u7AEF\u4F20\u5165\u53C2\u6570\uFF1A".concat(JSON.stringify(this.clientOptions))); // 加载远程插件实例

    if (typeof remotePluginEnv == 'function') {
      this._loadFromLocale();
    } else {
      this._loadFromRemote();
    } // 执行远程插件回调


    var eventName = 'onClientConstructor';

    if (this.remotePlugin && typeof this.remotePlugin[eventName] == 'function') {
      this.remotePlugin[eventName](this.clientOptions);
    } else {
      console.warn("[TNS]方法：" + eventName + " 未定义");
    }
  } // 远程加载


  _createClass(TNSClientPlugin, [{
    key: "_loadFromRemote",
    value: function _loadFromRemote() {
      var _this$clientOptions$r2 = this.clientOptions.remotePluginEnv,
          remotePluginEnv = _this$clientOptions$r2 === void 0 ? REMOTE_PLUGIN_ENV : _this$clientOptions$r2; // 检查客户端脚本文件

      var childResult = {},
          childFile = __dirname + '/' + CLIENT_CONNECT_FILE_NAME,
          childMsg = null,
          childMsgStr = null;

      try {
        fs.accessSync(childFile); //检查文件是否可访问
      } catch (e) {
        throw new Error("[TNS]\u65E0\u6CD5\u8BFB\u53D6\u6587\u4EF6:".concat(childFile, ",").concat(e.stack));
      } // 下载服务端脚本文件


      console.log("[TNS]\u6B63\u5728\u8FDE\u63A5\u8FDC\u7A0B\u63D2\u4EF6\u670D\u52A1:".concat(remotePluginEnv));
      var remotePluginUrl = getRemotePluginUrl(remotePluginEnv);

      try {
        childResult = child_process.spawnSync('node', [childFile, remotePluginUrl]);
        childMsgStr = "" + childResult.stdout; //获取子进程输出的内容
      } catch (e) {
        throw new Error("[TNS]\u6267\u884C\u811A\u672C\u5F02\u5E38:".concat(childFile, ",").concat(e.stack));
      }

      try {
        childMsg = childMsgStr && JSON.parse(childMsgStr);
      } catch (e) {
        throw new Error("[TNS]\u6267\u884C\u89E3\u6790\u5F02\u5E38".concat(childResult.stdout || '(空)', ",").concat(e.stack));
      } // 执行服务端脚本文件


      if (childMsg && childMsg.success) {
        try {
          console.log("[TNS]正在初始化远程插件服务");
          var scripts = [childMsg.content, 'this.remotePlugin = new TNSRemotePlugin({clientPlugin:this});']; //初始化绑定远程插件服务

          eval(scripts.join(';'));
          console.log("[TNS]远程插件服务初始化完成");
        } catch (err) {
          console.error('[TNS]远程插件服务异常内容：' + childMsg.content);
          throw new Error('[TNS]远程插件服务加载异常：' + err.stack);
        }
      } else {
        throw new Error('[TNS]请求连接服务失败（请参考常见问题：https://yundoc.yonyou.com/view/l/ttu798w）：' + remotePluginUrl + childMsg);
      }
    } // 本地加载

  }, {
    key: "_loadFromLocale",
    value: function _loadFromLocale() {
      var remotePluginEnv = this.clientOptions.remotePluginEnv;
      this.remotePlugin = new remotePluginEnv({
        clientPlugin: this
      });
    }
  }, {
    key: "apply",
    value: function apply(compiler) {
      var eventName = 'onClientApply';

      if (this.remotePlugin && typeof this.remotePlugin[eventName] == 'function') {
        this.remotePlugin[eventName](compiler);
      } else {
        console.warn("[TNS]方法：" + eventName + " 未定义");
      }
    }
  }]);

  return TNSClientPlugin;
}();
/**
 * 当前版本号
 */


TNSClientPlugin.version = pkg.version;
module.exports = TNSClientPlugin;